-- | Distributed tracing
--
-- A lightweight, testable, and opentracing-compliant tracing library.
--
--
--
module Monitor.Tracing
  (
  -- * Overview
  -- $overview
    Span, spanName, Name, spanStartTime, spanEndTime, spanDuration
  -- * Identification
  , spanContext, Context, contextTraceID, TraceID, contextSpanID, SpanID
  -- * References
  , spanReferences, Reference(..)
  -- * Metadata
  -- $readingMetadata
  , Key, spanTags, spanLogs, spanBaggages
  ) where

import Control.Monad.Trace
import Control.Monad.Trace.Class
import Monitor.Tracing.Internal

import qualified Data.Aeson as JSON
import Data.ByteString (ByteString)
import Data.Map.Strict (Map)
import Data.Set (Set)
import Data.Time.Clock (NominalDiffTime)
import Data.Time.Clock.POSIX (POSIXTime)

-- $overview
--
-- Assume we are interested in tracing the two following functions:
--
-- @
--  listTaskIDs :: MonadIO m => m [Int] -- Returns a list of all task IDs.
--  fetchTasks :: MonadIO m => [Int] -> m [Task] -- Resolves IDs into tasks.
-- @
--
-- We can do so simply by wrapping them inside a 'childSpan' call and adding a 'MonadTrace'
-- constraint:
--
-- @
--  listTaskIDs' :: (MonadIO m, MonadTrace m) => m [Int]
--  listTaskIDs' = childSpan "list-task-ids" listTaskIDs
--
--  fetchTasks' :: (MonadIO m, MonadTrace m) => [Int] -> m [Task]
--  fetchTasks' = childSpan "fetch-tasks" . fetchTasks
-- @
--
-- Spans will now automatically get generated each time these actions are run!
--
-- Each 'Span' includes various useful pieces of metadata, including lineage. For example, if we
-- wrap the two above functions in another, the spans will correctly be nested:
--
-- @
--  listTasks' :: (MonadIO m, MonadTrace m) => m [Task]
--  listTasks' = childSpan "list-tasks" $ listTaskIDs >>= fetchTasks
-- @
--
-- To extract the generated spans:
--
-- @
--  main :: IO ()
--  main = do
--    tracer <- startTracer $ zipkinPublisher "http://localhost:1234"
--    tasks <- trace tracer "" listTasks'
--    stopTracer tracer
--    print tasks
-- @

-- $readingMetadata
-- Spans can optionally be decorated with custom metadata. There are currently three such types of
-- metadata:
--
-- * Tags
-- * Logs
-- * Baggages
--
-- Each of these can be extracted using one of the functions below.
--
-- Note that the type of metadata influences how it is written. For example, baggages can only be
-- written at span creation time (to ensure that all children see consistent values). See
-- 'annotateSpan' and 'Builder' for more information.

-- startTracer :: MonadIO m => Request -> Manager -> m Tracer
-- stopTracer :: MonadIO m -> Tracer -> m ()
--

-- | Extracts a span's context. This context uniquely identifies the span.
spanContext :: Span -> Context
spanContext = _spanContext

-- | Extracts the span's name.
spanName :: Span -> Name
spanName = _spanName

-- | Extracts the span's references.
--
-- A span can reference zero, one, or more other spans' contexts. For example, a span generated by
-- 'childSpan' will always have the span active at the time of creation as its parent, and would
-- have a 'ChildOf' reference to the parent's 'Context' in this set.
spanReferences :: Span -> Set Reference
spanReferences = _spanReferences

-- | Extracts the time the span started at.
spanStartTime :: Span -> POSIXTime
spanStartTime = _spanStartTime

-- | Extracts the time the span ended at.
spanEndTime :: Span -> POSIXTime
spanEndTime s = _spanStartTime s + _spanDuration s

-- | Extracts the span's total duration (the difference between its end and start times).
spanDuration :: Span -> NominalDiffTime
spanDuration = _spanDuration

-- | Extracts all values tagged to the span.
spanTags :: Span -> Map Key JSON.Value
spanTags = _spanTags

-- | Extracts all values logged to the span, sorted in natural order.
spanLogs :: Span -> [(POSIXTime, Key, JSON.Value)]
spanLogs = _spanLogs

-- | Extracts all baggage values associated with the span. Baggage values are similar to tags except
-- that they are propagated to children spans (both 'ChildOf' and 'FollowsFrom' variants).
spanBaggages :: Span -> Map Key ByteString
spanBaggages = _contextBaggages . _spanContext

-- | Extracts the context's trace ID.
contextTraceID :: Context -> TraceID
contextTraceID = _contextTraceID

-- | Extracts the context's span ID.
contextSpanID :: Context -> SpanID
contextSpanID = _contextSpanID
